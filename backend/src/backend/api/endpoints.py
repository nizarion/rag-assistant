from fastapi import APIRouter
from pydantic import BaseModel
from backend.core.assistant import (
    retrieve_relevant_passages,
    get_embedding,
    vector_store,
)
from backend.core.logging_config import setup_logger
from backend.core.azure_client import chat_client
import os
from dotenv import load_dotenv

_ = load_dotenv()

logger = setup_logger(__name__)

router = APIRouter(prefix="/assistant")


class QueryRequest(BaseModel):
    query: str


@router.post("/query")
async def query_assistant(request: QueryRequest):
    passages = retrieve_relevant_passages(request.query)
    if not passages:
        return {"response": "No relevant passages found."}
    # System prompt for the model
    system_prompt = (
        "You are a helpful assistant that answers questions based on provided passages."
    )
    system_prompt += "\n".join(passages)
    logger.info(f"System prompt: {system_prompt}")

    response = chat_client.chat.completions.create(
        model=os.getenv("MODEL_DEPLOYMENT_NAME") or "changeme",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": request.query},
        ],
    )

    return {"response": response.choices[0].message.content}


@router.post("/populate-knowledge")
async def populate_data():
    """Populate vector store with knowledge data."""
    logger.info("Starting to populate knowledge data")

    passages = [
        "The 'Pacific Queen' sustained hull damage while navigating the Pacific Ocean, resulting in a 20% reduction in speed.",
        "Acme Maritime is our most important customer, consistently placing high-volume orders since 2015.",
        "The Port of Rotterdam is critical to our European logistics, with high efficiency in container handling.",
        "Real-time tracking along the North Atlantic route ensures prompt adjustments in response to traffic or weather changes.",
        "Hazardous material shipments are handled under strict compliance protocols to meet international safety standards.",
        "The 'Ocean Titan' underwent its last major refit in Rotterdam to ensure top-tier performance.",
        "Hurricane warnings on the Miami-New York route prompted real-time route adjustments to ensure safety.",
        "Our average transit time across all routes is 15 days, reflecting our optimized shipping schedules.",
        "Predictive maintenance protocols are triggered every 500 sailing hours to preempt equipment failures.",
        "Customers receive automated updates about shipment progress via email or SMS.",
        "Bulk cargo shipments account for 35% of our transport volume, requiring specialized handling and scheduling.",
        "Oceanic Logistics prioritizes premium service, ensuring regular scheduled routes between Asia and Europe.",
        "Our system integrates live weather feeds to dynamically update ETAs during severe weather conditions.",
        "The Port of Los Angeles is our primary loading dock, processing 60% of our west coast shipments.",
        "Vessel 'Atlantic Star' is known for its advanced fuel efficiency and is the backbone of our European operations.",
        "Dynamic ETAs are generated by integrating live tracking data from multiple sources.",
        "Environmental impact metrics indicate an 8% improvement in fuel efficiency after route optimization.",
        "Cargo damage incidents have decreased by 12% since implementing advanced safety protocols and real-time monitoring.",
        "The 'Ocean Titan' is due for its next dry-docking next week, as part of our proactive fleet management strategy.",
        "Global Shipping Partners has been our strategic partner for intercontinental container shipments.",
        "AI optimizes routes to minimize fuel consumption and reduce carbon footprints.",
        "Port Singapore serves as the central hub for our Southeast Asia operations, ensuring seamless cargo transfers.",
        "Compliance checks are conducted before every long-haul voyage, ensuring full adherence to international standards.",
        "Route A from Shanghai to Los Angeles is our busiest corridor, handling over 40% of container traffic.",
        "All vessels are scheduled for monthly maintenance to minimize downtime and ensure peak performance.",
    ]

    try:
        # Get embeddings for each passage in batches
        logger.info(f"Generating embeddings for {len(passages)} passages")
        embeddings: list[list[float]] = []
        batch_size = 10

        for i in range(0, len(passages), batch_size):
            batch = passages[i : i + batch_size]
            batch_embeddings = [get_embedding(passage) for passage in batch]

            # Validate embeddings
            if any(not embedding for embedding in batch_embeddings):
                raise ValueError(
                    "Failed to generate valid embeddings for some passages"
                )

            embeddings.extend(batch_embeddings)
            logger.debug(f"Processed {i + len(batch)}/{len(passages)} passages")

        # Store passages and their embeddings
        logger.info("Storing passages and embeddings in vector store")
        vector_store.store_passages(passages, embeddings)

        logger.info("Successfully populated knowledge data")
        return {
            "status": "success",
            "message": "Knowledge has been stored in the vector database",
            "count": len(passages),
        }
    except Exception as e:
        logger.error(f"Error populating knowledge: {str(e)}")
        return {
            "status": "error",
            "message": f"Failed to store knowledge: {str(e)}",
        }


@router.post("/ping")
async def ping():
    """Ping the assistant API to check if it's alive."""
    return {"status": "success", "message": "Assistant API is healthy."}
